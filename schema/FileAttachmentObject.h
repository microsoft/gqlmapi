// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// WARNING! Do not edit this file manually, your changes will be overwritten.

#pragma once

#ifndef FILEATTACHMENTOBJECT_H
#define FILEATTACHMENTOBJECT_H

#include "MAPISchema.h"

namespace graphql::mapi::object {
namespace implements {

template <class I>
concept FileAttachmentIs = std::is_same_v<I, Attachment>;

} // namespace implements

namespace methods::FileAttachmentHas {

template <class TImpl>
concept getIdWithParams = requires (TImpl impl, service::FieldParams params)
{
	{ service::AwaitableScalar<response::IdType> { impl.getId(std::move(params)) } };
};

template <class TImpl>
concept getId = requires (TImpl impl)
{
	{ service::AwaitableScalar<response::IdType> { impl.getId() } };
};

template <class TImpl>
concept getNameWithParams = requires (TImpl impl, service::FieldParams params)
{
	{ service::AwaitableScalar<std::string> { impl.getName(std::move(params)) } };
};

template <class TImpl>
concept getName = requires (TImpl impl)
{
	{ service::AwaitableScalar<std::string> { impl.getName() } };
};

template <class TImpl>
concept getContentsWithParams = requires (TImpl impl, service::FieldParams params)
{
	{ service::AwaitableScalar<std::optional<response::Value>> { impl.getContents(std::move(params)) } };
};

template <class TImpl>
concept getContents = requires (TImpl impl)
{
	{ service::AwaitableScalar<std::optional<response::Value>> { impl.getContents() } };
};

template <class TImpl>
concept getPropertiesWithParams = requires (TImpl impl, service::FieldParams params, std::optional<std::vector<PropIdInput>> idsArg)
{
	{ service::AwaitableObject<std::vector<std::shared_ptr<Property>>> { impl.getProperties(std::move(params), std::move(idsArg)) } };
};

template <class TImpl>
concept getProperties = requires (TImpl impl, std::optional<std::vector<PropIdInput>> idsArg)
{
	{ service::AwaitableObject<std::vector<std::shared_ptr<Property>>> { impl.getProperties(std::move(idsArg)) } };
};

template <class TImpl>
concept beginSelectionSet = requires (TImpl impl, const service::SelectionSetParams params)
{
	{ impl.beginSelectionSet(params) };
};

template <class TImpl>
concept endSelectionSet = requires (TImpl impl, const service::SelectionSetParams params)
{
	{ impl.endSelectionSet(params) };
};

} // namespace methods::FileAttachmentHas

class [[nodiscard("unnecessary construction")]] FileAttachment final
	: public service::Object
{
private:
	[[nodiscard("unnecessary call")]] service::AwaitableResolver resolveId(service::ResolverParams&& params) const;
	[[nodiscard("unnecessary call")]] service::AwaitableResolver resolveName(service::ResolverParams&& params) const;
	[[nodiscard("unnecessary call")]] service::AwaitableResolver resolveContents(service::ResolverParams&& params) const;
	[[nodiscard("unnecessary call")]] service::AwaitableResolver resolveProperties(service::ResolverParams&& params) const;

	[[nodiscard("unnecessary call")]] service::AwaitableResolver resolve_typename(service::ResolverParams&& params) const;

	struct [[nodiscard("unnecessary construction")]] Concept
	{
		virtual ~Concept() = default;

		virtual void beginSelectionSet(const service::SelectionSetParams& params) const = 0;
		virtual void endSelectionSet(const service::SelectionSetParams& params) const = 0;

		[[nodiscard("unnecessary call")]] virtual service::AwaitableScalar<response::IdType> getId(service::FieldParams&& params) const = 0;
		[[nodiscard("unnecessary call")]] virtual service::AwaitableScalar<std::string> getName(service::FieldParams&& params) const = 0;
		[[nodiscard("unnecessary call")]] virtual service::AwaitableScalar<std::optional<response::Value>> getContents(service::FieldParams&& params) const = 0;
		[[nodiscard("unnecessary call")]] virtual service::AwaitableObject<std::vector<std::shared_ptr<Property>>> getProperties(service::FieldParams&& params, std::optional<std::vector<PropIdInput>>&& idsArg) const = 0;
	};

	template <class T>
	struct [[nodiscard("unnecessary construction")]] Model final
		: Concept
	{
		explicit Model(std::shared_ptr<T> pimpl) noexcept
			: _pimpl { std::move(pimpl) }
		{
		}

		[[nodiscard("unnecessary call")]] service::AwaitableScalar<response::IdType> getId(service::FieldParams&& params) const override
		{
			if constexpr (methods::FileAttachmentHas::getIdWithParams<T>)
			{
				return { _pimpl->getId(std::move(params)) };
			}
			else if constexpr (methods::FileAttachmentHas::getId<T>)
			{
				return { _pimpl->getId() };
			}
			else
			{
				throw service::unimplemented_method(R"ex(FileAttachment::getId)ex");
			}
		}

		[[nodiscard("unnecessary call")]] service::AwaitableScalar<std::string> getName(service::FieldParams&& params) const override
		{
			if constexpr (methods::FileAttachmentHas::getNameWithParams<T>)
			{
				return { _pimpl->getName(std::move(params)) };
			}
			else if constexpr (methods::FileAttachmentHas::getName<T>)
			{
				return { _pimpl->getName() };
			}
			else
			{
				throw service::unimplemented_method(R"ex(FileAttachment::getName)ex");
			}
		}

		[[nodiscard("unnecessary call")]] service::AwaitableScalar<std::optional<response::Value>> getContents(service::FieldParams&& params) const override
		{
			if constexpr (methods::FileAttachmentHas::getContentsWithParams<T>)
			{
				return { _pimpl->getContents(std::move(params)) };
			}
			else if constexpr (methods::FileAttachmentHas::getContents<T>)
			{
				return { _pimpl->getContents() };
			}
			else
			{
				throw service::unimplemented_method(R"ex(FileAttachment::getContents)ex");
			}
		}

		[[nodiscard("unnecessary call")]] service::AwaitableObject<std::vector<std::shared_ptr<Property>>> getProperties(service::FieldParams&& params, std::optional<std::vector<PropIdInput>>&& idsArg) const override
		{
			if constexpr (methods::FileAttachmentHas::getPropertiesWithParams<T>)
			{
				return { _pimpl->getProperties(std::move(params), std::move(idsArg)) };
			}
			else if constexpr (methods::FileAttachmentHas::getProperties<T>)
			{
				return { _pimpl->getProperties(std::move(idsArg)) };
			}
			else
			{
				throw service::unimplemented_method(R"ex(FileAttachment::getProperties)ex");
			}
		}

		void beginSelectionSet(const service::SelectionSetParams& params) const override
		{
			if constexpr (methods::FileAttachmentHas::beginSelectionSet<T>)
			{
				_pimpl->beginSelectionSet(params);
			}
		}

		void endSelectionSet(const service::SelectionSetParams& params) const override
		{
			if constexpr (methods::FileAttachmentHas::endSelectionSet<T>)
			{
				_pimpl->endSelectionSet(params);
			}
		}

	private:
		const std::shared_ptr<T> _pimpl;
	};

	explicit FileAttachment(std::unique_ptr<const Concept> pimpl) noexcept;

	// Unions which include this type
	friend Attachment;

	template <class I>
	[[nodiscard("unnecessary call")]] static constexpr bool implements() noexcept
	{
		return implements::FileAttachmentIs<I>;
	}

	[[nodiscard("unnecessary call")]] service::TypeNames getTypeNames() const noexcept;
	[[nodiscard("unnecessary call")]] service::ResolverMap getResolvers() const noexcept;

	void beginSelectionSet(const service::SelectionSetParams& params) const override;
	void endSelectionSet(const service::SelectionSetParams& params) const override;

	const std::unique_ptr<const Concept> _pimpl;

public:
	template <class T>
	explicit FileAttachment(std::shared_ptr<T> pimpl) noexcept
		: FileAttachment { std::unique_ptr<const Concept> { std::make_unique<Model<T>>(std::move(pimpl)) } }
	{
	}

	[[nodiscard("unnecessary call")]] static constexpr std::string_view getObjectType() noexcept
	{
		return { R"gql(FileAttachment)gql" };
	}
};

} // namespace graphql::mapi::object

#endif // FILEATTACHMENTOBJECT_H
